---------------------------------------------------------------------------------------
Aktueller Stand
- SourcePath jetzt mit Validatorklasse implementiert und Textfeld direkt editierbar gemacht
- Validierung erfolgt bei Eingabe (jedes Zeichen!), aber nicht beim Programmstart.

---------------------------------------------------------------------------------------
To Do

Klären warum beim ersten Anzeigen des Dialogs keine Validierung stattfindet.

ErrorProvider für Fehlermeldungen verwenden
- Siehe http://www.codeproject.com/Articles/15239/Validation-in-Windows-Presentation-Foundation
- DatePicker Exceptions werden korrekt behandelt und wie im Beispiel angegeben mit ToolTip gemeldet
- Für die Verzeichnis-Textboxen klappt es nicht wie gewünscht. Entweder schlägt die Exception (z.B. string.empty)
  bereits im Konstruktor des ViewModel zu und wird dort nicht gefangen, oder es findet keine (neue) Validation statt
  und der Fehler wird im GUI nicht markiert. Vielleicht wäre der ValidationRule Ansatz ohne Exceptions im Artikel oben
  der besser Weg?
- Für eine Validation muss man eine Klasse von ValidationRule ableiten und ein override für Validate schreiben.
  Zusätzliche Properties kann man verwenden um Validation Parameter via XAML in den Validator einzubringen. Nachteil ist wohl
  dass es keine Möglichkeit gibt, Cross-Validations durchzuführen (so wie bei Start/Endedatum notwendig).

- Exception Handler für den Kopierthread, z.B. bei Problemen mit den Zugriffsrechten
- Drag and Drop zulassen: Einzelne Fotos auf das Fenster ziehen, die werden dann mit neuem Namen ins Zielverzeichnis kopiert

---------------------------------------------------------------------------------------
Versionen

2016-05-09: Version 01.10
- Fortschrittsbalken auch beim Suchen nach Fotos
- Start- und Endedatum in den Settings merken

in 2015: Version 01.00
- Settings, letzte Einstellungen merken
- Hilfsklasse für EXIF Extraktion
- Start Aktion codieren
- BrowserDialog zeigt selektierten Pfad an

Start erst freigeben wenn die Felder korrekt ausgefüllt sind
- Source + Target Dir existieren
- Date/Time korrekt, Ende >= Start
- Wie kann ich eine neue Prüfung triggern wenn ich z.B. ein neues Datum eingegeben oder ein Verzeichnis neu angelegt habe?
- Das geht so: StartCommand implementiert den Eventhandler CanExecuteChanged und gibt das Event and den CommandManager.RequerySuggested weiter.
  Siehe StartCommand.cs

  Infofenster für laufende Ausgaben anstatt MessageBox

File-Operationen in eigenem Thread
- Dazu Task Libary verwendet, siehe ViewModel.Start()

Info-Ausgabe
- Die Kopiertask bekommt ein Progress<string> Objekt, dem sie mit progress.Report(...) Texte mitgeben kann.
- Das Progress Objekt setzt die Information Property im ViewModel bei jedem Report Aufruf. Dort wiederum wird ein
  OnPropertyChanged Event an die Information Textbox gesendet.

Schnellere EXIF Extraktion
- Verwendung der ExifLib, Alter Code ist in ExifFile.ReadMetaDataBitmap noch enthalten.
- Mindestens Faktor 10!

Start Button erst wieder freigeben wenn die Task abgeschlossen ist.
- siehe http://stackoverflow.com/questions/14294738/when-is-canexecute-called
- Wenn die Background-Task endet, muss man CommandManager.InvalidateRequerySuggested() aufrufen um eine neue Abfrage zu erzwingen.
  Damit wird CanStart() aufgerufen und der Start Button kann sich auf das Ende der Task synchronisieren.

2015-11-21
- Wenn kein Aufnahmedatum vorhanden ist, das Dateidatum verwenden
- auf GitHub hochladen
- ExifLib wieder von GitHub runtergenommen

2015-11-22
- Style Template verwenden: Habe ich mal probehalber für die Progressbar eingebaut.
- Siehe http://www.codeproject.com/Articles/84630/WPF-Customize-your-Application-with-Styles-and-C
- Style Template für die Validation ErrorTemplate Geschichten erweitert.