---------------------------------------------------------------------------------------
To Do

- Problem bei der Validierung von Start- und Endedatum:
  - Start einstellen, danach ein Ende, das vor Start liegt. Wenn man jetzt Start so korrigiert, dass es vor dem Ende liegt, dann geht der Fehler bei "Ende" nicht mehr weg.
    Man muss explizit das Ende noch mal ändern (der selbe Wert bringt nichts) damit der Fehler verschwindet.
- Exception Handler für den Kopierthread, z.B. bei Problemen mit den Zugriffsrechten
- Originalnamen beibehalten hängt trotzdem die Kamera-Extension an
  (Das ist ein Feature, kein Bug => siehe Kommentar zu ExifFile.NearlyOriginalFileName)

---------------------------------------------------------------------------------------
Aktueller Stand

2018-08-22
- Immer noch ein Problem mit der Validierung von Start/Ende. Der Start Button wird jetzt zwar freigegeben wenn man das Problem oben durchspielt,
  aber der rote Rahmen bleibt bei dem Datum, welches nicht geändert wurde bestehen.

2016-05-21
- Die Idee mit den Validation Methoden ist ja nicht schlecht, aber wenn die Validation fehlschlägt,
  dann wird die entsprechende Property im ViewModel nicht gesetzt. Dann wird aber auch das Fehlerflag
  nicht gesetzt und der Start Button bleibt aktiviert.
- Das ViewModel kennt die UI Elemente nicht (d.h. soll sie nicht kennen) und kann sie daher nicht abfragen.
  Wie bekommt das ViewModel denn jetzt mit, dass SourcePath fehlerhaft ist?
  Die Validation Methode kann ja nicht nach draußen telefonieren?

---------------------------------------------------------------------------------------
Versionen
2018-08-22 Version 01.14
- kleinere Refactorings, usings entfernt, delegate-Aufrufe vereinfacht
- Pfade können nur noch über den Browse Button geändert werden, dadurch entfällt das Problem der Validierung beim Eintippen

2016-05-22: Version 01.13
- ExifLib wird jetzt per NuGet eingebunden (hat halt den Nachteil dass man nicht reindebuggenkann).

2016-05-21: Version 01.12
- Option "Originalnamen behalten"
- Drag and Drop zulassen: Einzelne Fotos auf das Fenster ziehen, die werden dann mit neuem Namen ins Zielverzeichnis kopiert.
  Funktioniert auch für mehrere Dateien und für Verzeichnisse.

2016-05-16: Version 01.11
- Stackoverflow hat die Lösung für die Validation gleich beim Start der Applikation, und nicht erst wenn sich
  der Eingabewert ändert: http://stackoverflow.com/questions/483419/force-validation-on-bound-controls-in-wpf
  Dazu muss man das Property ValidatesOnTargetUpdated="True" bei der ValidationRule angeben.
- TargetPath ebenfalls mit Validatorklasse implementiert

2016-05-09: Version 01.10
- Fortschrittsbalken auch beim Suchen nach Fotos
- Start- und Endedatum in den Settings merken
- SourcePath jetzt mit Validatorklasse implementiert und Textfeld direkt editierbar gemacht
- Validierung erfolgt bei Eingabe (jedes Zeichen!), aber nicht beim Programmstart.
  => im XAML Binding UpdateSourceTrigger="Default" setzen, das ist "LostFocus" für Textboxen, "PropertyChanged" für andere Controls.
     Weil das aber der Default ist, kann man das PropertyChanged Attribut für die Textboxen auch gleich ganz weglassen.
ErrorProvider für Fehlermeldungen verwenden
- Siehe http://www.codeproject.com/Articles/15239/Validation-in-Windows-Presentation-Foundation
- DatePicker Exceptions werden korrekt behandelt und wie im Beispiel angegeben mit ToolTip gemeldet

in 2015: Version 01.00
- Settings, letzte Einstellungen merken
- Hilfsklasse für EXIF Extraktion
- Start Aktion codieren
- BrowserDialog zeigt selektierten Pfad an

Start erst freigeben wenn die Felder korrekt ausgefüllt sind
- Source + Target Dir existieren
- Date/Time korrekt, Ende >= Start
- Wie kann ich eine neue Prüfung triggern wenn ich z.B. ein neues Datum eingegeben oder ein Verzeichnis neu angelegt habe?
- Das geht so: StartCommand implementiert den Eventhandler CanExecuteChanged und gibt das Event and den CommandManager.RequerySuggested weiter.
  Siehe StartCommand.cs

  Infofenster für laufende Ausgaben anstatt MessageBox

File-Operationen in eigenem Thread
- Dazu Task Libary verwendet, siehe ViewModel.Start()

Info-Ausgabe
- Die Kopiertask bekommt ein Progress<string> Objekt, dem sie mit progress.Report(...) Texte mitgeben kann.
- Das Progress Objekt setzt die Information Property im ViewModel bei jedem Report Aufruf. Dort wiederum wird ein
  OnPropertyChanged Event an die Information Textbox gesendet.

Schnellere EXIF Extraktion
- Verwendung der ExifLib, Alter Code ist in ExifFile.ReadMetaDataBitmap noch enthalten.
- Mindestens Faktor 10!

Start Button erst wieder freigeben wenn die Task abgeschlossen ist.
- siehe http://stackoverflow.com/questions/14294738/when-is-canexecute-called
- Wenn die Background-Task endet, muss man CommandManager.InvalidateRequerySuggested() aufrufen um eine neue Abfrage zu erzwingen.
  Damit wird CanStart() aufgerufen und der Start Button kann sich auf das Ende der Task synchronisieren.

2015-11-21
- Wenn kein Aufnahmedatum vorhanden ist, das Dateidatum verwenden
- auf GitHub hochladen
- ExifLib wieder von GitHub runtergenommen

2015-11-22
- Style Template verwenden: Habe ich mal probehalber für die Progressbar eingebaut.
- Siehe http://www.codeproject.com/Articles/84630/WPF-Customize-your-Application-with-Styles-and-C
- Style Template für die Validation ErrorTemplate Geschichten erweitert.